name: Build and Push to AWS ECR

on:
  push:
    branches:
      - main  # Run workflow on pushes to the main branch
      - dev   # Run workflow on pushes to the dev branch
    paths:
      - 'java_app/**' # Trigger workflow only if changes occur in the java_app directory
  workflow_dispatch: # Allows manual triggering of the workflow

env:
  AWS_REGION: us-east-1 # Update to your AWS region
  ECR_REPOSITORY_NAME: your-ecr-repository-name # Update to your ECR repository name

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Log in to AWS ECR
    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Step 3: Build the Docker image
    - name: Build Docker Image
      run: |
        docker build -t ${{ env.ECR_REPOSITORY_NAME }} ./java_app

    # Step 4: Tag the Docker image based on the branch
    - name: Tag Docker Image
      run: |
        ECR_URI=$(aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY_NAME }} --region ${{ env.AWS_REGION }} --query 'repositories[0].repositoryUri' --output text)
        echo "ECR_URI=${ECR_URI}" >> $GITHUB_ENV

        if [ "${{ github.ref_name }}" == "main" ]; then
          TAG="latest"
        else
          TAG="${{ github.ref_name }}"
        fi

        echo "TAG=${TAG}" >> $GITHUB_ENV
        docker tag ${{ env.ECR_REPOSITORY_NAME }}:latest ${ECR_URI}:${TAG}

    # Step 5: Push the Docker image to ECR
    - name: Push Docker Image to ECR
      run: |
        docker push ${ECR_URI}:${TAG}