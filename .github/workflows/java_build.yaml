name: Build, Test, Push Docker Image to ECR, and Deploy to EC2

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy (main or dev)'
        required: true
        default: 'main'
      image_tag:
        description: 'Docker image tag (e.g., latest, dev, or custom)'
        required: false
        default: 'latest'

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 537479208195.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY_NAME: java_app
  EC2_INSTANCE_HOST_MAIN: 18.208.176.32
  EC2_INSTANCE_HOST_DEV: 18.208.176.33
  EC2_USER: ec2-user
  DOCKER_IMAGE_NAME: java_app

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.branch }}

    # Step 2: Configure AWS Credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Step 3: Log in to Amazon ECR
    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
        docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

    # Step 4: Build the Docker image
    - name: Build Docker Image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_NAME }} ./java_app

    # Step 5: Tag the Docker image
    - name: Tag Docker Image
      run: |
        docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest \
        ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ inputs.image_tag }}

  test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build

    steps:
    # Step 1: Run Integration Tests Using Local Image
    - name: Run Integration Tests
      run: |
        docker run --rm -d --name test_container \
        -p 8080:8080 ${{ env.DOCKER_IMAGE_NAME }}
        sleep 5  # Wait for the container to start
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost/api/some-endpoint || exit 1
        docker stop test_container

    # Step 2: Run Unit Tests Inside Container
    - name: Run Unit Tests Inside Container
      run: |
        docker run --rm ${{ env.DOCKER_IMAGE_NAME }} \
        ./gradlew test --tests 'com.example.MyAppTests'

  push:
    name: Push Docker Image to ECR
    runs-on: ubuntu-latest
    needs: test

    steps:
    # Step 1: Push the Docker image to ECR
    - name: Push Docker Image to ECR
      run: |
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ inputs.image_tag }}

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: push

    steps:
    # Step 1: SSH into EC2 and Deploy the Docker Container
    - name: Deploy Docker Image to EC2
      run: |
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        
        if [ "${{ inputs.branch }}" == "main" ]; then
          EC2_INSTANCE_HOST=${{ env.EC2_INSTANCE_HOST_MAIN }}
        elif [ "${{ inputs.branch }}" == "dev" ]; then
          EC2_INSTANCE_HOST=${{ env.EC2_INSTANCE_HOST_DEV }}
        else
          echo "Invalid branch: ${{ inputs.branch }}"
          exit 1
        fi

        ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ env.EC2_USER }}@$EC2_INSTANCE_HOST << EOF
          # Log in to ECR
          docker login --username AWS --password $(aws ecr get-login-password --region ${{ env.AWS_REGION }}) ${{ env.ECR_REGISTRY }}

          # Pull the latest image
          docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ inputs.image_tag }}

          # Stop and remove any existing container
          docker stop java_app || true
          docker rm java_app || true

          # Run the new container
          docker run -d --name java_app -p 8080:8080 \
          ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ inputs.image_tag }}
        EOF
      env:
        AWS_REGION: ${{ env.AWS_REGION }}