name: Multistage Build, Test, Push Docker Image to ECR, and Deploy to EC2

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy (main or dev)'
        required: true
        default: 'main'
      image_tag:
        description: 'Docker image tag (e.g., latest, dev, or custom)'
        required: false
        default: 'latest'

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 537479208195.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY_NAME: java_app
  EC2_INSTANCE_HOST_MAIN: 18.208.176.32
  EC2_INSTANCE_HOST_DEV: 18.208.176.33
  EC2_USER: ec2-user
  DOCKER_IMAGE_NAME: java_app

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest ./java_app

      - name: Run Integration Tests
        run: |
          docker run --rm -d --name test_container \
          -p 8080:8080 ${{ env.DOCKER_IMAGE_NAME }}:latest
          sleep 5  # Wait for the container to start

          echo "Checking application logs for debugging:"
          docker logs test_container

          echo "Testing /index.html endpoint:"
          curl -f http://localhost:8080/index.html || {
            echo "Failed to reach /index.html endpoint";
            docker logs test_container;
            exit 1;
          }

          echo "Testing /health endpoint:"
          curl -f http://localhost:8080/actuator/health || {
            echo "Failed to reach /health endpoint";
            docker logs test_container;
            exit 1;
          }

          docker stop test_container

      - name: Save Docker Image as tar.gz
        run: |
          docker save java_app:latest | gzip > java_app_latest.tar.gz

      - name: Upload Docker Image as Artifact
        uses: actions/upload-artifact@v3
      with:
        name: built-image
        path: java_app_latest.tar.gz
  
  push-to-ecr:
    name: Push to ECR
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v3
        with:
          name: built-image
          path: .
      
      - name: Load Docker Image
        run: |
          gunzip < java_app_latest.tar.gz | docker load
          
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Tag Docker Image
        run: |
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest \
          ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ inputs.image_tag }}

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ inputs.image_tag }}

  deploy-to-ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: push-to-ecr
    steps:
      - name: Prepare SSH Key
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Determine Host
        run: |
          if [ "${{ inputs.branch }}" == "main" ]; then
            echo "EC2_INSTANCE_HOST=${{ env.EC2_INSTANCE_HOST_MAIN }}" >> $GITHUB_ENV
          else
            echo "EC2_INSTANCE_HOST=${{ env.EC2_INSTANCE_HOST_DEV }}" >> $GITHUB_ENV
          fi

      - name: Deploy Docker Image to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ env.EC2_USER }}@${{ env.EC2_INSTANCE_HOST }} << EOF
            # Log in to ECR
            docker login --username AWS --password $(aws ecr get-login-password --region ${{ env.AWS_REGION }}) ${{ env.ECR_REGISTRY }}

            # Pull the latest image
            docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ inputs.image_tag }} || {
              echo "Failed to pull Docker image";
              exit 1;
            }

            # Stop and remove any existing container
            docker stop java_app || true
            docker rm java_app || true

            # Run the new container
            docker run -d --name java_app -p 8080:8080 \
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ inputs.image_tag }}
          EOF

