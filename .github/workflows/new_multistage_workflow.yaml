name: New Multistage Build, Test, Analyze, Push Docker Image, and Deploy to EC2

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy (main or dev)'
        required: true
        default: 'main'
      image_tag:
        description: 'Docker image tag (e.g., latest, dev, or custom)'
        required: false
        default: 'latest'

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 537479208195.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY_NAME: java_app
  EC2_INSTANCE_USER: ec2-user
  DOCKER_IMAGE_NAME: java_app

jobs:
  build-and-test:
    name: Build, Test, and Analyze
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'

      - name: Cache Maven Packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Cache SonarQube Packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build and Analyze with SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        working-directory: java_app
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=Ilya3214_aws_eks_714cb506-6c64-4265-bcb7-be37b4c135fd \
          -Dsonar.projectName='aws_eks'

      - name: Build Docker Image
        run: docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest ./java_app

      - name: Run Integration Tests
        run: |
          docker run --rm -d --name test_container \
          -p 8080:8080 ${{ env.DOCKER_IMAGE_NAME }}:latest
          
          for i in {1..10}; do
            if curl -f http://localhost:8080/index.html; then
              break
            fi
            sleep 2
          done || {
            docker logs test_container
            exit 1
          }

          curl -f http://localhost:8080/actuator/health || {
            docker logs test_container
            exit 1
          }

          docker stop test_container

      - name: Save Docker Image as tar.gz
        run: docker save ${{ env.DOCKER_IMAGE_NAME }}:latest | gzip > java_app_latest.tar.gz

      - name: Upload Docker Image as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-image
          path: java_app_latest.tar.gz

  push-to-ecr:
    name: Push to ECR
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: built-image
          path: .

      - name: Load Docker Image
        run: gunzip < java_app_latest.tar.gz | docker load

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Tag Docker Image
        run: docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest \
          ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ inputs.image_tag }}

      - name: Push Docker Image to ECR
        run: docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ inputs.image_tag }}

  deploy-to-ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: push-to-ecr
    steps:
      - name: Prepare SSH Key
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Determine EC2 Instance Name
        run: |
          if [ "${{ inputs.branch }}" == "main" ]; then
            echo "EC2_INSTANCE_NAME=prod-ec2-instance" >> $GITHUB_ENV
          else
            echo "EC2_INSTANCE_NAME=dev-ec2-instance" >> $GITHUB_ENV
          fi

      - name: Retrieve EC2 Public IPs
        run: |
          INSTANCE_IPS=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${{ env.EC2_INSTANCE_NAME }}" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].PublicIpAddress" --output text)
        
          if [ -z "$INSTANCE_IPS" ]; then
            exit 1
          fi
        
          echo "EC2_INSTANCE_HOSTS=$INSTANCE_IPS" >> $GITHUB_ENV

      - name: Deploy to EC2
        run: |
          for ip in $EC2_INSTANCE_HOSTS; do
            ssh -o StrictHostKeyChecking=no -i private_key.pem \
            ${{ env.EC2_INSTANCE_USER }}@$ip << 'EOF'
              aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
              docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
              docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ inputs.image_tag }}
              docker stop java_app || true
              docker rm java_app || true
              docker run -d --name java_app -p 8080:8080 \
                ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ inputs.image_tag }}
          EOF
          done